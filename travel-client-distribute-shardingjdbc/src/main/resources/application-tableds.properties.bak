server.port=8084

spring.shardingsphere.mode.type=Standalone
spring.shardingsphere.mode.repository.type=File
spring.shardingsphere.mode.overwrite=true

# 数据源的名称
spring.shardingsphere.datasource.names=ds-0,ds-1

# 数据源1
spring.shardingsphere.datasource.ds-0.jdbc-url=jdbc:mysql://localhost:3306/kss_sharding_db_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-0.username=root
spring.shardingsphere.datasource.ds-0.password=mkxiaoer
# 数据源2
spring.shardingsphere.datasource.ds-1.jdbc-url=jdbc:mysql://localhost:3306/kss_sharding_db_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-1.username=root
spring.shardingsphere.datasource.ds-1.password=mkxiaoer


# 配置t_order表规则
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..1}
# 配置分库策略
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-inline
# 配置分表策略
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-inline


# 配置当前订单表的注主键是order_id 用雪花算法生成
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake

# 配置分片算法
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds-$->{user_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-inline.props.algorithm-expression=t_order_$->{order_id % 2}
# 配置分片的key都用雪花算法生成
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
# 打开sql输出日志
spring.shardingsphere.props.sql-show=true




# 加密算法配置
spring.shardingsphere.rules.encrypt.encryptors.aes-encrypt.type=AES
spring.shardingsphere.rules.encrypt.encryptors.aes-encrypt.props.aes-key-value=1234568abcdefg
# 该表是否使用加密列进行查询
# false = SELECT  id,name,create_time,update_time,pwd AS pwd,mobile AS mobile,pwdaec  FROM t_cipher_old
# true = SELECT  id,name,create_time,update_time,pwdaec AS pwd,mobile AS mobile,pwdaec  FROM t_cipher_old
#spring.shardingsphere.rules.encrypt.tables.t_cipher_old.query-with-cipher-column=false
# pwd 加密列名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.pwd.cipher-column=pwd_cipher
# pwd 原文列名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.pwd.plain-column=pwd
# pwd 加密算法名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.pwd.encryptor-name=aes-encrypt

# mobile 加密列名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.mobile.cipher-column=mobile_cipher
# mobile 原文列名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.mobile.plain-column=mobile
# 加密算法名称
spring.shardingsphere.rules.encrypt.tables.t_cipher_old.columns.mobile.encryptor-name=aes-encrypt
# 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询
spring.shardingsphere.rules.encrypt.queryWithCipherColumn=true



# mybatis-plus配置
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.mapper-locations=classpath*:/mapper/*.xml
